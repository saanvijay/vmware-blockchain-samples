apiVersion: apps/v1
kind: Deployment
metadata:
  name: vmbc-deployment-client-4-cre
  labels:
    app: client-4-cre
    blockchainId: {{ .Values.global.blockchainId }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: client-4-cre
      blockchainId: {{ .Values.global.blockchainId }}
  template:
    metadata:
      labels:
        app: client-4-cre
        blockchainId: {{ .Values.global.blockchainId }}
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - client-4-clientservice
              topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
        - name: vmwathena-regcred
      volumes:
        # client persistent volume claim
        - name: client-client-4-volume
          persistentVolumeClaim:
            claimName: client-pvc-{{ .Values.global.blockchainId }}-client-4
        # component specific configmap volume
        - name: config-cre-volume
          configMap:
            name: vmbc-configmap-client-4-cre
        # component specific secret volume
        - name: secret-cre-volume
          secret:
            secretName: vmbc-secret-client-4-cre
      containers:
        - name: client-4-cre
          image: {{ include "cre.image" . }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "{{ .Values.resources.client.cpuLimit | default .Values.resources.client.defaultCpuLimit }}"
              memory: "{{ .Values.resources.client.memoryLimit | default .Values.resources.client.defaultMemoryLimit }}"
            requests:
              cpu: "{{ .Values.resources.client.cpuRequest | default .Values.resources.client.defaultCpuRequest }}"
              memory: "{{ .Values.resources.client.memoryRequest | default .Values.resources.client.defaultMemoryRequest }}"
          volumeMounts:
            - name: client-client-4-volume
              mountPath: /config/clientservice/tls_certs
              subPath: {{.Release.Namespace}}/{{.Values.global.blockchainId}}/client-4/clientservice/tls_certs
            ### component-specific files
            # client/participant service config file
            {{- $clientserviceconfigfile := "client-4/config/clientservice/clientservice.config" }}
            {{- $clientserviceconfigfilePrefixRemoved := $clientserviceconfigfile | replace "client-4/config/clientservice/clientservice.config" "/cre/bftConfig/participant.config" }}
            - name: config-cre-volume
              mountPath: {{ $clientserviceconfigfilePrefixRemoved }}
              subPath: clientservice-config-file
            # environment vars file
            {{- $environmentvarsfile := "client-4/config/clientservice/environment-vars" }}
            {{- $environmentvarsfilePrefixRemoved := $environmentvarsfile | replace "client-4" "" }}
            - name: config-cre-volume
              mountPath: {{ $environmentvarsfilePrefixRemoved }}
              subPath: environment-vars-file
            ##########################################
            #           Secrets volumes              #
            ##########################################
            # transaction signing private key
            {{- $transactionsigningkeyfile := "client-4/config/clientservice/signing_keys/transaction_signing_priv.pem" }}
            {{- $transactionsigningkeyfilePrefixRemoved := $transactionsigningkeyfile | replace "client-4" "" }}
            - name: secret-cre-volume
              mountPath: {{ $transactionsigningkeyfilePrefixRemoved }}
              subPath:   clientservice-transaction-signing-key-file
      initContainers:
        - name: init-container
          image: {{ include "cre.image" . }}
          command: ["/bin/bash", "-ec", "echo 'Start verifying if files exist in persistent volume client-client-4-volume';
          while [ ! -d /config/{{.Release.Namespace}}/{{.Values.global.blockchainId}}/client-4/clientservice/tls_certs ]; do
            sleep 5;
          done;
          echo 'End verifying for files exist in persistent volume client-client-4-volume' "]
          volumeMounts:
            - mountPath: /config
              name: client-client-4-volume
          resources:
            limits:
              cpu: "{{ .Values.resources.initContainer.cpuLimit }}"
              memory: "{{ .Values.resources.initContainer.memoryLimit }}"
            requests:
              cpu: "{{ .Values.resources.initContainer.cpuRequest }}"
              memory: "{{ .Values.resources.initContainer.memoryRequest }}"
