    # Global tags can be specified here in key="value" format.
    [global_tags]
      blockchain = "746d220e-1eb9-4d15-ae1b-a224cee8d396"
      vm_type = "vmbc"
      #source = "746d220e-1eb9-4d15-ae1b-a224cee8d396"

    # Configuration for telegraf agent
    [agent]
      interval = "10s"
      round_interval = true

      metric_batch_size = 1000

      metric_buffer_limit = 10000

      collection_jitter = "0s"

      flush_interval = "10s"
      flush_jitter = "0s"

      precision = ""

     ## Override default hostname, if empty use os.Hostname()
       hostname = ""
       omit_hostname = true

    # Telegraf pull metrics configuration
    [[outputs.prometheus_client]]
       ## Address to listen on
       listen = ":9273"

    #   ## Use HTTP Basic Authentication.
    #   basic_username = "$TELEGRAF_USERNAME"
    #   basic_password = "$TELEGRAF_PASSWORD"

       ## Path to publish the metrics on.
       path = "/metrics"

    #   ## enable TLS with the given certificate if provided by users
    #   $ENABLE_TELEGRAF_TLS tls_cert = "/config/telegraf/certs/prometheus_client/telegraf.crt"
    #   $ENABLE_TELEGRAF_TLS tls_key = "/config/telegraf/certs/prometheus_client/telegraf.key"

    # Telegraf push metrics configuration
     [[outputs.http]]

      ## Use HTTP Basic Authentication.
       url = "$PUSH_HTTP_URL"
        username = "$PUSH_HTTP_USERNAME"
        password = "$PUSH_HTTP_PASSWORD"

       ## enable TLS with the given certificate if provided by users
       # tls_cert = "/telegraf/certs/ca.crt"
       insecure_skip_verify = true

    ## Additional HTTP headers
         [outputs.http.headers]
            Content-Type = "application/json"
          #  Authorization = "$PUSH_HTTP_TOKEN"


    [[outputs.cloudwatch]]
       region = "$CW_REGION"
       namespace = "$CW_NAMESPACE"
      ## Amazon Credentials
      ## Credentials are loaded in the following order
      ## 1) Web identity provider credentials via STS if role_arn and web_identity_token_file are specified
      ## 2) Assumed credentials via STS if role_arn is specified
      ## 3) explicit credentials from 'access_key' and 'secret_key'
      ## 4) shared profile from 'profile'
      ## 5) environment variables
      ## 6) shared credentials file
      ## 7) EC2 Instance Profile
          access_key = "$CW_ACCESS_KEY"
          secret_key = "$CW_SECRET_KEY"
          token = "$CW_TOKEN_KEY"

    [[inputs.prometheus]]
      ## HTTP Basic Authentication username and password. ('bearer_token' and
      ## 'bearer_token_string' take priority)
      username = "indexdb"
      password = "indexdb"
      urls = $PULL_ENDPOINTS
      namepass = []
      namedrop = []

